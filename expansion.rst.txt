..
   Этот файл является частью проекта Logtalk <https://logtalk.org/>  
   Copyright 1998-2022 Paulo Moura <pmoura@logtalk.org>
   Идентификатор лицензии SPDX: Apache-2.0

   Лицензируется в соответствии с лицензией Apache, версия 2.0 (далее «Лицензия»);
   вы не можете использовать этот файл иначе, как в соответствии с Лицензией.
   Вы можете получить копию Лицензии на

       http://www.apache.org/licenses/LICENSE-2.0

   Если это не требуется законодательством или не согласовано в письменной форме, программное обеспечение
   распространяется по лицензии на условиях "КАК ЕСТЬ".,
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых.
   См. лицензию для конкретного языка, регулирующего разрешения и
   ограничения, предусмотренные Лицензией.


.. _expansion_expansion:

Расширение термов и целей
=========================

Logtalk поддерживает *механизм расширения терминов и целей* (trm and goal expansion), используемый для определения преобразований текста исходного кода в другой текст. Два распространенных способа использования - это определение языковых расширений и языков предметной области.

Logtalk улучшает механизм расширения терминов, используемый в некоторых
системах Prolog, предоставляя пользователю детальный контроль над процессом
аппликации расширений (при каком условии, когда и варинат). Механизм расширений Logtalk позволяет объявить в самом исходном файле, какие расширения будут использоваться при его компиляции, если таковые имеются. Он также позволяет объявить, какие расширения будут использоваться при компиляции файла, осуществляемой предикатами компиляции и загрузки. Он определяет концепцию *объектов-крючков* (hook-objects), используемых в качестве строительных блоков для создания специальных или повторяющихся *шаблонных расширений* с явной и четко определенной семантикой. Предотвращается загрузка правил расширения, влияющих на последующую компиляцию файлов. Она предотвращает конфликты между группами правил расширения различного происхождения. Также предотвращается влияние неработоспособного набора правил на работу других наборов правил расширения.


Задание расширений
------------------

Расширения термов и целей определяются при помощи предикатов :ref:`methods_term_expansion_2` и :ref:`methods_goal_expansion_2`, соответственно. Эти предикаты объявлены во встроенном протоколе :ref:`expanding <apis:expanding/0>`.
Обратите внимание, что, в отличие от систем Prolog, также предоставляющих эти два предиката, они
** не ** объявляются как :term:`мультифайловые предикаты <multifile predicate="">`
в протоколе. Такое проектное решение позволяет программисту полностью контролировать процесс расширения и предотвращать проблемы, возникающие в большинстве систем Prolog, реализующих механизм расширения термов.

Пример объекта, определяющего правила расширения:

::

   :- object(an_object,
       implements(expanding)).

       term_expansion(ping, pong).
       term_expansion(
           colors,
           [white, yellow, blue, green, read, black]
       ).

       goal_expansion(a, b).
       goal_expansion(b, c).
       goal_expansion(X is Expression, true) :-
           catch(X is Expression, _, fail).

   :- end_object.

Эти предикаты можно вызывать явно с помощью встроенных методов :ref:`methods_expand_term_2` и :ref:`methods_expand_goal_2` или автоматически при компиляции исходного файла (см. раздел ниже *hook-объекты*).

Утверждения для предиката `term_expansion/2` вызываются до тех пор, пока одно из них
не завершится успешно.ь Возвращаемое расширение может быть либо одним термом или списком термов. 
Например:

.. code-block:: text

   | ?- an_object::expand_term(ping, Term).
   
   Term = pong
   yes
   
   | ?- an_object::expand_term(colors, Colors).
   
   Colors = [white, yellow, blue, green, read, black]
   yes

Если ни одно из предложений ``term_expansion/2`` не было применено, возвращается тот же терм, что мы пытались подвергнуть расширению:

.. code-block:: text

   | ?- an_object::expand_term(sounds, Sounds).
   
   Sounds = sounds
   yes

Утверждения предиката ``goal_expansion/2`` рекурсивно вызываются над
расширяемой целью до тех пор, пока не будет достигнута неподвижная точка (пока не перестанут происходить изменения). Например:

.. code-block:: text
   
   | ?- an_object::expand_goal(a, Goal).
   
   Goal = c
   yes

   | ?- an_object::expand_goal(X is 3+2*5, Goal).
   
   X = 13,
   Goal = true
   yes

Когда ни одно из предложений `goal_expansion/2` не было применено, возвращается та же цель, которую мы пытаемся расширить:

.. code-block:: text
   
   | ?- an_object::expand_goal(3 =:= 5, Goal).
   
   Goal = (3=:=5)
   yes

Механизм расширения цели предотвращает порождение бесконечного цикла при расширении цели, проверяя, что расширяемая цель не является результатом предыдущего
расширения той же цели. Например, рассмотрим следующий объект:

::

   :- object(fixed_point,
       implements(expanding)).

       goal_expansion(a, b).
       goal_expansion(b, c).
       goal_expansion(c, (a -> b; c)).

   :- end_object.

Расширение цели ``a`` приводит к цели ``(a -> b; c)`` без попытки дальнейшего расширения целей ``a``, `` b `` и ``c``, так как они уже являются результатом расширения.


Расширение правил грамматики
----------------------------

Распространенным применением расширения терма является перевод грамматических правил в предикатные утверждения. Это преобразование выполняется компилятором автоматически, в исходном файле определяются правила грамматики. Это также можно сделать явно, вызывая встроенный метод ``expand_term/2``. Например: 

.. code-block:: text

   | ?- logtalk::expand_term((a --> b, c), Clause).

   Clause = (a(A,B) :- b(A,C), c(C,B))
   yes

Обратите внимание, что правила перевода грамматики по умолчанию можно переопределить,
задав утверждения для предиката :ref:`methods_term_expansion_2`.


Обход расширений
----------------

Термы и цели, заключенные в управляющую конструкцию :ref:`control_external_call_1` не подвергаются расширению. Например:

.. code-block:: text

   | ?- an_object::expand_term({ping}, Term).
   
   Term = {ping}
   yes
   
   | ?- an_object::expand_goal({a}, Goal).
   
   Goal = {a}
   yes

Это также относится к термам и целям исходного файла при использовании
объектов ``hook`` (обсуждается далее).


Hook-объекты
-------------

Расширение терма и цели исходного файла во время компиляции выполняется с помощью так назваемых *hook-объектов*. Объект hook - это объект, реализующий встроенный протокол :ref:`expanding <apis:expanding/0>` и задающий утверждения для hook-предикатов расширения. Объекты Hook должны быть скомпилированы и загружены перед их использованием для расширения какого-либо файла.

Чтобы скомпилировать исходный файл с использованием объекта hook, можно использовать флаг компилятора :ref:`hook <flag_hook>` во втором аргументе встроенных предикатов :ref:`predicates_logtalk_compile_2` и :ref:`predicates_logtalk_load_2`. Например:

.. code-block:: text

   | ?- logtalk_load(source_file, [hook(hook_object)]).
   ...

В качестве альтернативы можно использовать директивы :ref:`directives_set_logtalk_flag_2` в самом исходном файле. Например:

::

   :- set_logtalk_flag(hook, hook_object).

Чтобы использовать несколько объектов hook в одном исходном файле, просто напишите каждую директиву перед блоком кода, который она должна обрабатывать. Например:

::

   :- object(h1,
       implements(expanding)).
   
       term_expansion((:- public(a/0)), (:- public(b/0))).
       term_expansion(a, b).
   
   :- end_object.

::

   :- object(h2,
       implements(expanding)).
   
       term_expansion((:- public(a/0)), (:- public(c/0))).
       term_expansion(a, c).
   
   :- end_object.

::

   :- set_logtalk_flag(hook, h1).
   
   :- object(s1).
   
       :- public(a/0).
       a.
   
   :- end_object.
   
   
   :- set_logtalk_flag(hook, h2).
   
   :- object(s2).
   
       :- public(a/0).
       a.
   
   :- end_object.

.. code-block:: text

   | ?- {h1, h2, s}.
   ...

   | ?- s1::b.
   yes

   | ?- s2::c.
   yes

Также можно определить hook-объект по умолчанию, задав глобальное значение для флага ``hook`` вызовом предиката :ref:`predicates_set_logtalk_flag_2`. Например:

.. code-block:: text

   | ?- set_logtalk_flag(hook, hook_object).
   
   yes

Директива ``set_logtalk_flag/2`` является локальной для исходного файла. Ее использование для указания объекта hook переопределит любой предопределенный ранее объект hook, в том числе указанный в опциях компилятора `logtalk_compile/2` и `logtalk_load/2` при компиляции или загрузке исходного файла.

.. note::

   Clauses for the ``term_expansion/2`` and ``goal_expansion/2`` predicates
   defined within an object or a category are never used in the compilation
   of the object or the category itself.

.. index:: single: begin_of_file
.. index:: single: end_of_file


Virtual source file terms and loading context
---------------------------------------------

When using a hook object to expand the terms of a source file, two
virtual file terms are generated: ``begin_of_file`` and ``end_of_file``.
These terms allow the user to define term-expansions before and after
the actual source file terms.

Logtalk also provides a :ref:`predicates_logtalk_load_context_2`
built-in predicate that can be used to access the compilation/loading
context when performing expansions. The :ref:`logtalk <objects_logtalk>`
built-in object also provides a set of predicates that can be useful,
notably when adding Logtalk support for languages extensions originally
developed for Prolog.

As an example of using the virtual terms and the ``logtalk_load_context/2``
predicate, assume that you want to convert plain Prolog files to Logtalk by
wrapping the Prolog code in each file using an object (named after the file)
that implements a given protocol. This could be accomplished by defining
the following hook object:

::

   :- object(wrapper(_Protocol_),
       implements(expanding)).

       term_expansion(begin_of_file, (:- object(Name,implements(_Protocol_)))) :-
           logtalk_load_context(file, File),
           os::decompose_file_name(File,_ , Name, _).

       term_expansion(end_of_file, (:- end_object)).

   :- end_object.

Assuming e.g. ``my_car.pl`` and ``lease_car.pl`` files  to be wrapped and a
``car_protocol`` protocol, we could then load them using:

.. code-block:: text

   | ?- logtalk_load(
            ['my_car.pl', 'lease_car.pl'],
            [hook(wrapper(car_protocol))]
        ).
   
   yes

.. note::

   When a source file also contains plain Prolog directives and predicates,
   these are term-expanded but not goal-expanded (with the exception of the
   ``initialization/1``, ``if/``, and ``elif/1`` directives, where the goal
   argument is expanded to improve code portability across backends).


Default compiler expansion workflow
-----------------------------------

When :ref:`compiling a source file <programming_multi_pass_compiler>`,
the compiler will first try, by default,
the source file specific hook object specified using a local
``set_logtalk_flag/2`` directive, if defined. If that expansion fails,
it tries the hook object specified using the ``hook/1`` compiler option
in the ``logtalk_compile/2`` or ``logtalk_load/2`` goal that compiles
or loads the file, if defined. If that expansion fails, it tries the
default hook object, if defined. If that expansion also fails, the
compiler tries the Prolog dialect specific expansion rules found
in the :term:`adapter file` (which are used to support non-standard
Prolog features).


User defined expansion workflows
--------------------------------

Sometimes we have multiple hook objects that we need to combine and use in
the compilation of a source file. Logtalk includes a :doc:`../libraries/hook_flows`
library that supports two basic expansion workflows: a :ref:`pipeline <apis:hook_pipeline/1>`
of hook objects, where the expansion results from a hook object are feed to
the next hook object in the pipeline, and a :ref:`set <apis:hook_set/1>` of
hook objects, where expansions are tried until one of them succeeds. These
workflows are implemented as parametric objects allowing combining them to
implement more sophisticated expansion workflows. There is also a
:doc:`../libraries/hook_objects` library that provides convenient hook
objects for defining custom expansion workflows. This library includes an
hook object that can be used to restore the default expansion workflow used
by the compiler.

For example, assuming that you want to apply the Prolog backend specific
expansion rules defined in its adapter file, using the
:ref:`backend_adapter_hook <apis:backend_adapter_hook/0>` library object,
passing the resulting terms to your own expansion when compiling a source
file, we could use the goal:

.. code-block:: text

   | ?- logtalk_load(
            source,
            [hook(hook_pipeline([backend_adapter_hook, my_expansion]))]
        ).

As a second example, we can prevent expansion of a source file using the library
object :ref:`identity_hook <apis:identity_hook/0>` by adding as the first term in a
source file the directive:

::

   :- set_logtalk_flag(hook, identity_hook).

The file will be compiled as-is as any hook object (specified as a compiler
option or as a default hook object) and any backend adapter expansion rules
are overriden by the directive.


Using Prolog defined expansions
-------------------------------

In order to use clauses for the ``term_expansion/2`` and ``goal_expansion/2``
predicates defined in plain Prolog, simply specify the pseudo-object ``user``
as the hook object when compiling source files. When using
:term:`backend Prolog compilers <backend Prolog compiler>` that support a
module system, it can also be specified a module containing clauses for the
expanding predicates as long as the module name doesn't coincide with an
object name. When defining a custom workflow, the library object
:ref:`prolog_module_hook/1 <apis:prolog_module_hook/1>` can be used as a
workflow step. For example, assuming a module ``functions`` defining expansion
rules that we want to use:

.. code-block:: text

   | ?- logtalk_load(
            source,
            [hook(hook_set([prolog_module_hook(functions), my_expansion]))]
        ).

But note that Prolog module
libraries may provide definitions of the expansion predicates that are
not compatible with the Logtalk compiler. Specially when setting the
hook object to ``user``, be aware of any Prolog library that is loaded,
possibly by default or implicitly by the Prolog system, that may be
contributing definitions of the expansion predicates. It is usually
safer to define a specific hook object for combining multiple expansions
in a fully controlled way.

.. note::

   The ``user`` object declares ``term_expansion/2`` and ``goal_expansion/2``
   as multifile and dynamic predicates. This helps in avoiding predicate
   existence errors when compiling source files with the ``hook`` flag set
   to ``user`` as these predicates are only natively declared in some of the
   supported backend Prolog compilers.

Debugging expansions
--------------------

The ``term_expansion/2`` and ``goal_expansion/2`` predicates can be
:ref:`debugged <debugging_debugging>` as any other object predicates. Note
that expansions can often be manually tested by sending
:ref:`methods_expand_term_2` and :ref:`methods_expand_goal_2`
messages to a hook object with the term or goal whose expansion you want to
check as argument. An alternative to the debugging tools is to use a
:term:`monitor` for the runtime messages that call the predicates. For example,
assume a ``expansions_debug.lgt`` file with the contents:

::

   :- initialization(
       define_events(after, edcg, _, _, expansions_debug)
   ).


   :- object(expansions_debug,
       implements(monitoring)).

       after(edcg, term_expansion(T,E), _) :-
           writeq(term_expansion(T,E)), nl.

   :- end_object.

We can use this monitor to help debug the expansion rules of the
:doc:`../libraries/edcg` library when applied to the ``edcgs`` example using
the queries:

.. code-block:: text

   | ?- {expansions_debug}.
   ...

   | ?- set_logtalk_flag(events, allow).
   yes

   | ?- {edcgs(loader)}.
   ...
   term_expansion(begin_of_file,begin_of_file)
   term_expansion((:-object(gemini)),[(:-object(gemini)),(:-op(1200,xfx,-->>))])
   term_expansion(acc_info(castor,A,B,C,true),[])
   term_expansion(pass_info(pollux),[])
   term_expansion(pred_info(p,1,[castor,pollux]),[])
   term_expansion(pred_info(q,1,[castor,pollux]),[])
   term_expansion(pred_info(r,1,[castor,pollux]),[])
   term_expansion((p(A)-->>B is A+1,q(B),r(B)),(p(A,C,D,E):-B is A+1,q(B,C,F,E),r(B,F,D,E)))
   term_expansion((q(A)-->>[]),(q(A,B,B,C):-true))
   term_expansion((r(A)-->>[]),(r(A,B,B,C):-true))
   term_expansion(end_of_file,end_of_file)
   ...

This solution does not require compiling the ``edcg`` hook object in debug
mode or access to its source code (e.g. to modify its expansion rules to
emit debug messages. We could also simply use the ``user`` pseudo-object
as the monitor object:

.. code-block:: text

   | ?- assertz((
            after(_, term_expansion(T,E), _) :-
               writeq(term_expansion(T,E)), nl
        )).
   yes

   | ?- define_events(after, edcg, _, Sender, user).
   yes

Another alternative is to use a pipeline of hook objects with the library
``hook_pipeline/1`` and ``write_to_stream_hook`` objects to write the
expansion results to a file. For example, using the ``unique.lgt`` test
file from the ``edcgs`` library directory:

.. code-block:: text

   | ?- {hook_flows(loader), hook_objects(loader)}.
   ...
   
   | ?- open('unique_expanded.lgt', write, Stream),
        logtalk_compile(
            unique,
            [hook(hook_pipeline([edcg,write_to_stream_hook(Stream,[quoted(true)])]))]
        ),
        close(Stream).
   ...

The generated ``unique_expanded.lgt`` file will contain the clauses resulting
from the expansion of the EDCG rules found in the ``unique.lgt`` file by the
``edcg`` hook object expansion.
